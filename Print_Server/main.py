import asyncio
import logging
import os
import subprocess
from pathlib import Path
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.fsm.storage.memory import MemoryStorage

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
DOWNLOAD_DIR = Path("downloads")
DOWNLOAD_DIR.mkdir(exist_ok=True)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
logging.basicConfig(level=logging.INFO)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---

@router.message(CommandStart())
async def cmd_start(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–Ø –±–æ—Ç-–ø—Ä–∏–Ω—Ç–µ—Ä –¥–ª—è Raspberry Pi.\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç, –∏ —è –µ–≥–æ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—é."
    )


@router.message(F.document)
async def handle_document(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    """
    document = message.document
    file_id = document.file_id
    file_info = await bot.get_file(file_id)
    file_path = file_info.file_path
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    file_name = document.file_name
    destination = DOWNLOAD_DIR / file_name
    
    await message.answer(f"üìÑ –ü–æ–ª—É—á–∏–ª —Ñ–∞–π–ª: {file_name}\n–°–∫–∞—á–∏–≤–∞—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ –ø–µ—á–∞—Ç—å...")

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await bot.download_file(file_path, destination=str(destination))
        logging.info(f"–§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –≤ {destination}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ –ø–µ—á–∞—Ç—å —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É lp
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º `subprocess.run` –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        process = subprocess.run(
            ['lp', str(destination)],
            check=True,         # –í—ã–∑–æ–≤–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Å –æ—à–∏–±–∫–æ–π
            capture_output=True, # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç stdout –∏ stderr
            text=True           # –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç –≤—ã–≤–æ–¥ –≤ —Ç–µ–∫—Å—Ç
        )

        logging.info(f"–ö–æ–º–∞–Ω–¥–∞ –ø–µ—á–∞—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. STDOUT: {process.stdout}")
        await message.answer(f"‚úÖ –§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–µ—á–∞—Ç—å!")

    except subprocess.CalledProcessError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—á–∞—Ç–∏ —Ñ–∞–π–ª–∞: {e.stderr}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—á–∞—Ç–∏: {e.stderr}")
    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –ø–µ—á–∞—Ç–∏ (–∏–ª–∏ –æ—à–∏–±–∫–∏)
        if os.path.exists(destination):
            os.remove(destination)
            logging.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª '{file_name}' —É–¥–∞–ª–µ–Ω.")


@router.message()
async def handle_other_messages(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø–µ—á–∞—Ç–∏.")


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---

async def main():
    dp.include_router(router)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
